============================================
vis/result.rtx
10:41:33_Tuesday_26_May_2020
============================================
Feedback:Your program ("Nimsys.java") is submitted successfully. :) 
Your program is compiled successfully :) 
The following are few simple tests and their results.
However, it's your responsibility to test your program more extensively!
Note that the program input (including carriage returns) is not displayed
with the program output. The two streams are displayed separately.
==================Test 1====================
Test for input file: in1
removeplayer
y
createplayer lskywalker,Skywalker,Luke
addplayer lskywalker
addplayer lskywalker,Skywalker,Luke
addplayer lskywalker,Skywalker,Luke
removeplayer
y
addplayer george,Washington,George
addplayer jadams,Adams,John
startgame 4,2,george,jadams
4
1
1
1
1
exit

Expected results:                                                       Your results:
Welcome to Nim								Welcome to Nim

$Are you sure you want to remove all players? (y/n)			$Are you sure you want to remove all players? (y/n)

$'createplayer' is not a valid command.					$'createplayer' is not a valid command.

$Incorrect number of arguments supplied to command.			$Incorrect number of arguments supplied to command.

$									$
$The player already exists.						$The player already exists.

$Are you sure you want to remove all players? (y/n)			$Are you sure you want to remove all players? (y/n)

$									$
$									$
$									$
Initial stone count: 4							Initial stone count: 4
Maximum stone removal: 2						Maximum stone removal: 2
Player 1: George Washington						Player 1: George Washington
Player 2: John Adams							Player 2: John Adams

4 stones left: * * * *							4 stones left: * * * *
George's turn - remove how many?					George's turn - remove how many?

Invalid move. You must remove between 1 and 2 stones.			Invalid move. You must remove between 1 and 2 stones.

4 stones left: * * * *							4 stones left: * * * *
George's turn - remove how many?					George's turn - remove how many?

3 stones left: * * *							3 stones left: * * *
John's turn - remove how many?						John's turn - remove how many?

2 stones left: * *							2 stones left: * *
George's turn - remove how many?					George's turn - remove how many?

1 stones left: *							1 stones left: *
John's turn - remove how many?						John's turn - remove how many?

Game Over								Game Over
George Washington wins!							George Washington wins!

$									$

Your results seem to be CORRECT.  :)
==================Test 2====================
Test for input file: in2
displayplayer
rankings
exit

Expected results:                                                       Your results:
Welcome to Nim								Welcome to Nim

$george,George,Washington,1 games,1 wins				$george,George,Washington,1 games,1 wins
jadams,John,Adams,1 games,0 wins					jadams,John,Adams,1 games,0 wins

$100% | 01 games | George Washington					$100% | 01 games | George Washington
0%   | 01 games | John Adams						0%   | 01 games | John Adams

$									$

Your results seem to be CORRECT.  :)
==================Test 3====================
Test for input file: in3
rankings
removeplayer
y
createplayer ari,Ariana,Grande
addplayer ari,Ariana,Grande
addplayer tyty,tyler,swift
rankings
startgame 6,2,ari,tyty
4
2
2
2
startgame 6,2,ari,tyty
4
2
2
2
rankings
exit

Expected results:                                                       Your results:
Welcome to Nim								Welcome to Nim

$100% | 01 games | George Washington					$100% | 01 games | George Washington
0%   | 01 games | John Adams						0%   | 01 games | John Adams

$Are you sure you want to remove all players? (y/n)			$Are you sure you want to remove all players? (y/n)

$'createplayer' is not a valid command.					$'createplayer' is not a valid command.

$									$
$									$
$0%   | 00 games | Grande Ariana					$0%   | 00 games | Grande Ariana
0%   | 00 games | swift tyler						0%   | 00 games | swift tyler

$									$
Initial stone count: 6							Initial stone count: 6
Maximum stone removal: 2						Maximum stone removal: 2
Player 1: Grande Ariana							Player 1: Grande Ariana
Player 2: swift tyler							Player 2: swift tyler

6 stones left: * * * * * *						6 stones left: * * * * * *
Grande's turn - remove how many?					Grande's turn - remove how many?

Invalid move. You must remove between 1 and 2 stones.			Invalid move. You must remove between 1 and 2 stones.

6 stones left: * * * * * *						6 stones left: * * * * * *
Grande's turn - remove how many?					Grande's turn - remove how many?

4 stones left: * * * *							4 stones left: * * * *
swift's turn - remove how many?						swift's turn - remove how many?

2 stones left: * *							2 stones left: * *
Grande's turn - remove how many?					Grande's turn - remove how many?

Game Over								Game Over
swift tyler wins!							swift tyler wins!

$									$
Initial stone count: 6							Initial stone count: 6
Maximum stone removal: 2						Maximum stone removal: 2
Player 1: Grande Ariana							Player 1: Grande Ariana
Player 2: swift tyler							Player 2: swift tyler

6 stones left: * * * * * *						6 stones left: * * * * * *
Grande's turn - remove how many?					Grande's turn - remove how many?

Invalid move. You must remove between 1 and 2 stones.			Invalid move. You must remove between 1 and 2 stones.

6 stones left: * * * * * *						6 stones left: * * * * * *
Grande's turn - remove how many?					Grande's turn - remove how many?

4 stones left: * * * *							4 stones left: * * * *
swift's turn - remove how many?						swift's turn - remove how many?

2 stones left: * *							2 stones left: * *
Grande's turn - remove how many?					Grande's turn - remove how many?

Game Over								Game Over
swift tyler wins!							swift tyler wins!

$100% | 02 games | swift tyler						$100% | 02 games | swift tyler
0%   | 02 games | Grande Ariana						0%   | 02 games | Grande Ariana

$									$

Your results seem to be CORRECT.  :)
==============================================
Start Bonus test
Tester.java:12: error: constructor NimAIPlayer in class NimAIPlayer cannot be applied to given types;
			Testable player = new NimAIPlayer();
			                  ^
  required: String,String,String
  found: no arguments
  reason: actual and formal argument lists differ in length
1 error
====================BONUS1=====================
This test is for the implmentation of the advanced Nim game.
Test for input file: in_advanced1
removeplayer
y
addplayer lskywalker,Skywalker,Luke
addaiplayer artoo,D2,R2
startgame 30,5,artoo,lskywalker
1
2
3
4
1
rankings
exit

Expected results:                                                       Your results:
Welcome to Nim								Welcome to Nim

$Are you sure you want to remove all players? (y/n)			$Are you sure you want to remove all players? (y/n)

$									$
$									$
$									$
Initial stone count: 30							Initial stone count: 30
Maximum stone removal: 5						Maximum stone removal: 5
Player 1: R2 D2								Player 1: R2 D2
Player 2: Luke Skywalker						Player 2: Luke Skywalker

30 stones left: * * * * * * * * * * * * * * * * * * * * * * * * * * 	30 stones left: * * * * * * * * * * * * * * * * * * * * * * * * * * 
R2's turn - remove how many?						R2's turn - remove how many?

								     >	Invalid move. You must remove between 1 and 5 stones.
								     >
								     >	30 stones left: * * * * * * * * * * * * * * * * * * * * * * * * * * 
								     >	R2's turn - remove how many?
								     >
25 stones left: * * * * * * * * * * * * * * * * * * * * * * * * *	25 stones left: * * * * * * * * * * * * * * * * * * * * * * * * *
Luke's turn - remove how many?						Luke's turn - remove how many?

24 stones left: * * * * * * * * * * * * * * * * * * * * * * * *		24 stones left: * * * * * * * * * * * * * * * * * * * * * * * *
R2's turn - remove how many?						R2's turn - remove how many?

19 stones left: * * * * * * * * * * * * * * * * * * *			19 stones left: * * * * * * * * * * * * * * * * * * *
Luke's turn - remove how many?						Luke's turn - remove how many?

17 stones left: * * * * * * * * * * * * * * * * *			17 stones left: * * * * * * * * * * * * * * * * *
R2's turn - remove how many?						R2's turn - remove how many?

13 stones left: * * * * * * * * * * * * *			     |	12 stones left: * * * * * * * * * * * *
Luke's turn - remove how many?					     <
								     <
10 stones left: * * * * * * * * * *				     <
R2's turn - remove how many?					     <
								     <
7 stones left: * * * * * * *					     <
Luke's turn - remove how many?						Luke's turn - remove how many?

3 stones left: * * *						     |	9 stones left: * * * * * * * * *
R2's turn - remove how many?						R2's turn - remove how many?

1 stones left: *						     |	4 stones left: * * * *
Luke's turn - remove how many?						Luke's turn - remove how many?

Game Over								Game Over
R2 D2 wins!								R2 D2 wins!

								     >	$'1' is not a valid command.
								     >
$100% | 01 games | R2 D2						$100% | 01 games | R2 D2
0%   | 01 games | Luke Skywalker					0%   | 01 games | Luke Skywalker

$									$

Oops, your results seem to be INCORRECT.  :(
====================BONUS1=====================
====================BONUS2=====================
This test is for the implmentation of the advanced Nim game.
Test for input file: in_advanced
removeplayer
y
addplayer george,Washington,George
addplayer jadams,Adams,John
addplayer tom,Jefferson,Thomas
addplayer jmadison,Madison,James
startadvancedgame 5,george,jadams
2 2
4 1
1 1
5 1
startadvancedgame 7,george,jadams
4 1
2 2
6 2
1 1
5 1
startadvancedgame 9,jadams,tom
8 2
4 1
3 1
5 1
1 1
6 1
2 1
7 1
startadvancedgame 11,tom,jmadison
2 2
19 2
10 2
5 2
8 2
4 1
1 1
7 1
rankings
exit

Expected results:                                                       Your results:
Welcome to Nim								Welcome to Nim

$Are you sure you want to remove all players? (y/n)			$Are you sure you want to remove all players? (y/n)

$									$
$									$
$									$
$									$
$								     |	$'startadvancedgame' is not a valid command.
Initial stone count: 5						     <
Stones display: <1,*> <2,*> <3,*> <4,*> <5,*>			     <
Player 1: George Washington					     <
Player 2: John Adams						     <
								     <
5 stones left: <1,*> <2,*> <3,*> <4,*> <5,*>			     <
George's turn - which to remove?				     <

3 stones left: <1,*> <2,x> <3,x> <4,*> <5,*>			     |	$'2' is not a valid command.
John's turn - which to remove?					     <

2 stones left: <1,*> <2,x> <3,x> <4,x> <5,*>			     |	$'4' is not a valid command.
George's turn - which to remove?				     <

1 stones left: <1,x> <2,x> <3,x> <4,x> <5,*>			     |	$'1' is not a valid command.
John's turn - which to remove?					     <

Game Over							     |	$'5' is not a valid command.
John Adams wins!						     <

$								     |	$'startadvancedgame' is not a valid command.
Initial stone count: 7						     <
Stones display: <1,*> <2,*> <3,*> <4,*> <5,*> <6,*> <7,*>	     <
Player 1: George Washington					     <
Player 2: John Adams						     <

7 stones left: <1,*> <2,*> <3,*> <4,*> <5,*> <6,*> <7,*>	     |	$'4' is not a valid command.
George's turn - which to remove?				     <

6 stones left: <1,*> <2,*> <3,*> <4,x> <5,*> <6,*> <7,*>	     |	$'2' is not a valid command.
John's turn - which to remove?					     <

4 stones left: <1,*> <2,x> <3,x> <4,x> <5,*> <6,*> <7,*>	     |	$'6' is not a valid command.
George's turn - which to remove?				     <

2 stones left: <1,*> <2,x> <3,x> <4,x> <5,*> <6,x> <7,x>	     |	$'1' is not a valid command.
John's turn - which to remove?					     <

1 stones left: <1,x> <2,x> <3,x> <4,x> <5,*> <6,x> <7,x>	     |	$'5' is not a valid command.
George's turn - which to remove?				     <

Game Over							     |	$'startadvancedgame' is not a valid command.
George Washington wins!						     <
								     <
$								     <
Initial stone count: 9						     <
Stones display: <1,*> <2,*> <3,*> <4,*> <5,*> <6,*> <7,*> <8,*> <9,* <
Player 1: John Adams						     <
Player 2: Thomas Jefferson					     <

9 stones left: <1,*> <2,*> <3,*> <4,*> <5,*> <6,*> <7,*> <8,*> <9,*> |	$'8' is not a valid command.
John's turn - which to remove?					     <

7 stones left: <1,*> <2,*> <3,*> <4,*> <5,*> <6,*> <7,*> <8,x> <9,x> |	$'4' is not a valid command.
Thomas's turn - which to remove?				     <

6 stones left: <1,*> <2,*> <3,*> <4,x> <5,*> <6,*> <7,*> <8,x> <9,x> |	$'3' is not a valid command.
John's turn - which to remove?					     <

5 stones left: <1,*> <2,*> <3,x> <4,x> <5,*> <6,*> <7,*> <8,x> <9,x> |	$'5' is not a valid command.
Thomas's turn - which to remove?				     <

4 stones left: <1,*> <2,*> <3,x> <4,x> <5,x> <6,*> <7,*> <8,x> <9,x> |	$'1' is not a valid command.
John's turn - which to remove?					     <

3 stones left: <1,x> <2,*> <3,x> <4,x> <5,x> <6,*> <7,*> <8,x> <9,x> |	$'6' is not a valid command.
Thomas's turn - which to remove?				     <

2 stones left: <1,x> <2,*> <3,x> <4,x> <5,x> <6,x> <7,*> <8,x> <9,x> |	$'2' is not a valid command.
John's turn - which to remove?					     <
								     <
1 stones left: <1,x> <2,x> <3,x> <4,x> <5,x> <6,x> <7,*> <8,x> <9,x> <
Thomas's turn - which to remove?				     <
								     <
Game Over							     <
Thomas Jefferson wins!						     <
								     <
$								     <
Initial stone count: 11						     <
Stones display: <1,*> <2,*> <3,*> <4,*> <5,*> <6,*> <7,*> <8,*> <9,* <
Player 1: Thomas Jefferson					     <
Player 2: James Madison						     <

11 stones left: <1,*> <2,*> <3,*> <4,*> <5,*> <6,*> <7,*> <8,*> <9,* |	$'7' is not a valid command.
Thomas's turn - which to remove?				     <

9 stones left: <1,*> <2,x> <3,x> <4,*> <5,*> <6,*> <7,*> <8,*> <9,*> |	$'startadvancedgame' is not a valid command.
James's turn - which to remove?					     <

Invalid move.							     |	$'2' is not a valid command.

9 stones left: <1,*> <2,x> <3,x> <4,*> <5,*> <6,*> <7,*> <8,*> <9,*> |	$'19' is not a valid command.
James's turn - which to remove?					     <

7 stones left: <1,*> <2,x> <3,x> <4,*> <5,*> <6,*> <7,*> <8,*> <9,*> |	$'10' is not a valid command.
Thomas's turn - which to remove?				     <

5 stones left: <1,*> <2,x> <3,x> <4,*> <5,x> <6,x> <7,*> <8,*> <9,*> |	$'5' is not a valid command.
James's turn - which to remove?					     <

3 stones left: <1,*> <2,x> <3,x> <4,*> <5,x> <6,x> <7,*> <8,x> <9,x> |	$'8' is not a valid command.
Thomas's turn - which to remove?				     <

2 stones left: <1,*> <2,x> <3,x> <4,x> <5,x> <6,x> <7,*> <8,x> <9,x> |	$'4' is not a valid command.
James's turn - which to remove?					     <

1 stones left: <1,x> <2,x> <3,x> <4,x> <5,x> <6,x> <7,*> <8,x> <9,x> |	$'1' is not a valid command.
Thomas's turn - which to remove?				     <

Game Over							     |	$'7' is not a valid command.
Thomas Jefferson wins!						     <

$100% | 02 games | Thomas Jefferson				     |	$0%   | 00 games | George Washington
50%  | 02 games | George Washington				     |	0%   | 00 games | John Adams
33%  | 03 games | John Adams					     |	0%   | 00 games | James Madison
0%   | 01 games | James Madison					     |	0%   | 00 games | Thomas Jefferson

$									$

Oops, your results seem to be INCORRECT.  :(
====================BONUS2=====================
Error: Could not find or load main class Tester
This test is for the victory guaranteed strategy for the advanced Nim game
Your solution is correct if it outputs 100 percent winning ratios in all cases
============================================
src/MyException.java
10:41:30_Tuesday_26_May_2020
============================================
/** 
 * name: Yuqing Chang
 * student number: 1044862
 * username: yuqchang
 */
public class MyException extends Exception {
	private String message = "";

	/**
	 * No-argument constructor of MyException class
	 */
	public MyException() {
		super();
	}

	/**
	 * Constructor of MyException class
	 */
	public MyException(String msg) {
		super(msg);
		message = msg;
	}

	/**
	 * Get the message of the error
	 */
	public String getMessage() {
		return this.message;
	}
}
============================================
src/NimHumanPlayer.java
10:41:30_Tuesday_26_May_2020
============================================
/** 
 * name: Yuqing Chang
 * student number: 1044862
 * username: yuqchang
 */
public class NimHumanPlayer extends NimPlayer {

	/**
	 * Constructor of NimHumanPlayer class
	 */
	public NimHumanPlayer(String username, String family_name, String given_name) {
		//Call the constructor of the parent class
		super(username, family_name, given_name);
	}

	/**
	 * Ask and return the number of stones the player wants to remove
	 */
	public int removeStone(NimGame game) {
		System.out.println(givenName + "'s turn - remove how many?");
		this.removeNum = Nimsys.scan.nextInt();
		return this.removeNum;
	}
}
============================================
src/Nimsys.java
10:41:30_Tuesday_26_May_2020
============================================

/** 
 * name: Yuqing Chang
 * student number: 1044862
 * username: yuqchang
 */
import java.util.Scanner;
import java.util.Arrays;
import java.io.*;
import java.util.*;

public class Nimsys {

	// Create a scanner object to get data from the keyboard
	public static Scanner scan = new Scanner(System.in);
	private static String url = "E:\\data_store\\eclipse_data\\ProjectA\\src\\";
	private static File fil = new File(url + "players.dat");
	private final int MAX = 100;
	private final int PERCENT = 100;
	private final int RANK = 10;

	// Array to store NimPlayer objects
	private static NimPlayer[] player = new NimPlayer[1];
	

	public static void main(String[] args) {
		Nimsys nimsys = new Nimsys();

		if (fil.exists()) {
			player = read_data(fil, player);
			// System.out.println("kk");
		} else {

			try {
				fil.createNewFile();
				FileWriter fileWriter = new FileWriter(url + "players.dat");
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		// System.out.println(player.length);
		// Display a welcome message
		System.out.println("Welcome to Nim");
		System.out.println();
		System.out.print("$");
		while (true) {
			String input = scan.nextLine();
			try {
				nimsys.command_control(input);
			} catch (MyException e) {
				if (e.getMessage().length() > 0) {
					System.out.println("'" + e.getMessage() + "' is not a valid command.");
					System.out.println();
					System.out.print("$");
				}
			} catch (Arguments a) {
				System.out.println("Incorrect number of arguments supplied to command.");
				System.out.println();
				System.out.print("$");
			}
		}
	}

	/**
	 * Command Control Center
	 */
	public void command_control(String input) throws MyException, Arguments {
		// Split input into commands and parameters
		String[] Str = input.split(" ");
		String command = Str[0];
		String[] arg;
		int c = 0;

		if (Str.length == 1)
			arg = null;
		else
			arg = Str[1].split(",");

		// Combine switch statement to distinguish input commands
		if (command.equals("addplayer"))
			c = 1;
		else if (command.equals("removeplayer"))
			c = 2;
		else if (command.equals("editplayer"))
			c = 3;
		else if (command.equals("resetstats"))
			c = 4;
		else if (command.equals("displayplayer"))
			c = 5;
		else if (command.equals("rankings"))
			c = 6;
		else if (command.equals("startgame"))
			c = 7;
		else if (command.equals("exit"))
			c = 8;
		else if (command.equals("addaiplayer"))
			c = 9;

		switch (c) {
		case 1:
			if (arg.length < 3) {
				throw new Arguments();
			}
			addPlayer(arg);
			break;
		case 2:
			removePlayer(arg);
			break;
		case 3:
			if (arg.length < 3) {
				throw new Arguments();
			}
			editPlayer(arg);
			break;
		case 4:
			resetStats(arg);
			break;
		case 5:
			displayPlayer(arg);
			break;
		case 6:
			rank(arg);
			break;
		case 7:
			if (arg.length < 4) {
				throw new Arguments();
			}
			startGame(arg);
			break;
		case 8:
			exit();
			break;
		case 9:
			if (arg.length < 3) {
				throw new Arguments();
			}
			addAIPlayer(arg);
			break;
		default:
			throw new MyException(command);
		}
	}

	/**
	 * Allows new players to be added to the game
	 */
	public void addPlayer(String[] Str) {
		// The maximum number of players can be set as 100
		if (player.length == MAX) {
			System.out.println("The maximum number of players has been reached!");
			return;
		}
		if (player[0] == null) {
			player[0] = new NimHumanPlayer(Str[0], Str[1], Str[2]);
		} else {
			// Check if the user already exists in the user list
			if (check(Str[0]) == false) {
				NimHumanPlayer p1 = new NimHumanPlayer(Str[0], Str[1], Str[2]);
				player = add(p1, player);
			} else
				System.out.println("The player already exists.");
		}
		System.out.println();
		System.out.print("$");
	}

	/**
	 * Allows new AIplayers to be added to the game
	 */
	public void addAIPlayer(String[] Str) {
		// The maximum number of players can be set as 100
		if (player.length == MAX) {
			System.out.println("The maximum number of players has been reached!");
			return;
		}
		if (player[0] == null) {
			player[0] = new NimAIPlayer(Str[0], Str[1], Str[2]);
		} else {
			// Check if the user already exists in the user list
			if (check(Str[0]) == false) {
				NimAIPlayer p1 = new NimAIPlayer(Str[0], Str[1], Str[2]);
				player = add(p1, player);
			} else
				System.out.println("The player already exists.");
		}
		System.out.println();
		System.out.print("$");
	}

	/**
	 * Allows players to be removed from the game
	 */
	public void removePlayer(String[] Str) {
		boolean ask = true;
		if (Str == null) {
			while (ask == true) {
				System.out.println("Are you sure you want to remove all players? (y/n)");
				String answer = scan.next();
				int flag = 0; // Flag variable identifying whether to remove all data
				if (answer.equals("y"))
					flag = 1;
				else if (answer.equals("n"))
					flag = 2;
				switch (flag) {
				// Remove all players
				case 1:
					int l = player.length;
					for (int i = 0; i < l; i++) {
						player = remove(player);
					}
					ask = false;
					break;
				case 2:
					ask = false;
					break;
				default:
					System.out.println("Please enter correct format.");
				}
			}
		} else {
			if (player[0] == null) {
				System.out.println("The player does not exist.");
			} else {
				// Check if the user exists in the user list
				if (check(Str[0]) == false)
					System.out.println("The player does not exist.");
				else {// Delete the player with the specified username
					for (int i = 0; i < player.length; i++) {
						if (player[i].getUserName().equals(Str[0]))
							player = remove(i, player);
					}
				}
			}
		}
		System.out.println();
		System.out.print("$");
	}

	/**
	 * Allows player details to be edited
	 */
	public void editPlayer(String[] Str) {
		if (player[0] == null) {
			System.out.println("The player does not exist.");
		} else {
			// Check if the user already exists in the user list
			if (check(Str[0]) == false)
				System.out.println("The player does not exist.");
			else {
				for (int i = 0; i < player.length; i++) {
					if (player[i].getUserName().equals(Str[0]))
						player[i].setName(Str[1], Str[2]);
				}
			}
		}
		System.out.println();
		System.out.print("$");
	}

	/**
	 * Allows player statistics to be reset
	 */
	public void resetStats(String[] Str) {
		boolean ask = true;
		if (Str == null) {
			while (ask == true) {
				System.out.println("Are you sure you want to reset all player statistics? (y/n)");
				String answer = scan.next();
				int flag = 0; // Flag variable identifying whether to reset all data
				if (answer.equals("y"))
					flag = 1;
				else if (answer.equals("n"))
					flag = 2;

				switch (flag) {
				case 1:
					for (int i = 0; i < player.length; i++) {
						player[i].reset();
					}
					ask = false;
					break;
				case 2:
					ask = false;
					break;
				default:
					System.out.println("Please enter correct format.");
				}
			}
		} else { // Reset all data of the specified user
			if (player[0] == null) {
				System.out.println("The player does not exist.");
			} else {
				// Check if the user exists in the user list
				if (check(Str[0]) == false)
					System.out.println("The player does not exist.");
				else {
					for (int i = 0; i < player.length; i++) {
						if (player[i].getUserName().equals(Str[0]))
							player[i].reset();
					}
				}
			}
		}
		System.out.println();
		System.out.print("$");
	}

	/**
	 * Displays players' information
	 */
	public void displayPlayer(String[] Str) {
		if (Str == null) {
			// Display information for all players, ordered by username alphabetically
			if (player[0] != null) {
				for (int i = 0; i < player.length; i++) {
					for (int j = 0; j < player.length - 1 - i; j++) {
						if (player[j + 1].getUserName().compareTo(player[j].getUserName())<= 0){
							NimPlayer temp = player[j + 1];
							player[j + 1] = player[j];
							player[j] = temp;
						}
					}
				}
				for (int i = 0; i < player.length; i++)
					player[i].display();
			}
		} else { // Display the information of the specified user
			if (player[0] == null) {
				System.out.println("The player does not exist.");
			} else {
				// Check if the user exists in the user list
				if (check(Str[0]) == false)
					System.out.println("The player does not exist.");
				else {
					for (int i = 0; i < player.length; i++) {
						if (player[i].getUserName().equals(Str[0]))
							player[i].display();
					}
				}
			}
		}
		System.out.println();
		System.out.print("$");
	}

	/**
	 * Outputs a list of player rankings
	 */
	public void rank(String[] Str) {
		int l = 0;
		if (Str == null || Str[0].equals("desc")) {
			bubbleSortDesc(player);
			if (player.length > RANK)
				l = RANK;
			else
				l = player.length;
			for (int i = 0; i < l; i++) {
				// Round the percentages to the nearest integer value
				int ratio = (int) Math.round(PERCENT * player[i].getWinRatio());
				String r = ratio + "%";
				String num = " " + player[i].convertGamesNum() + " games";
				String fullName = player[i].getFullName();
				// Output according to the specified format
				String num_format = String.format("%-10s", num);
				System.out.println(String.format("%-5s", r) + "|" + num_format + "| " + fullName);
			}
		} else {
			bubbleSortAsc(player);
			if (player.length > RANK)
				l = RANK;
			else
				l = player.length;
			for (int i = 0; i < l; i++) {
				// Round the percentages to the nearest integer value
				int ratio = (int) Math.round(PERCENT * player[i].getWinRatio());
				String r = ratio + "%";
				String num = " " + player[i].convertGamesNum() + " games";
				String fullName = player[i].getFullName();
				// Output according to the specified format
				String num_format = String.format("%-10s", num);
				System.out.println(String.format("%-5s", r) + "|" + num_format + "| " + fullName);
			}
		}
		System.out.println();
		System.out.print("$");
	}

	/**
	 * Creates and commences a game of Nim
	 */
	public void startGame(String[] Str) {
		// Check if all players are exist in user list
		if (check(Str[2]) == false || check(Str[3]) == false) {
			System.out.println("One of the players does not exist.");
		} else {
			if (check(Str[2]) && check(Str[3]) == true) {
				int stoneInitial = Integer.parseInt(Str[0]);
				int stoneUpper = Integer.parseInt(Str[1]);
				NimPlayer p1 = findByUsername(Str[2]);
				NimPlayer p2 = findByUsername(Str[3]);

				// Create a new instance of NimGame
				NimGame game = new NimGame(stoneInitial, stoneUpper, p1, p2);
				System.out.println();
				System.out.println("Initial stone count: " + stoneInitial);
				System.out.println("Maximum stone removal: " + stoneUpper);
				System.out.println("Player 1: " + p1.getFullName());
				System.out.println("Player 2: " + p2.getFullName());
				game.games();
			}
		}
		System.out.println();
		System.out.print("$");
	}

	/**
	 * Exits the Nimsys program and store data in .dat file
	 */
	public void exit() {
		// Delete the original file and create a new blank file with the same name
		fil.delete();
		fil = new File(url + "players.dat");

		// Write all current player data to this file
		write_data(fil, player);
		System.out.println();
		System.exit(0);
	}

	/**
	 * Find the corresponding index according to the user name in the array
	 */
	public NimPlayer findByUsername(String n) {
		for (int i = 0; i < player.length; i++) {
			if (n.equals(player[i].getUserName()))
				return player[i];
		}
		System.out.println("The player does not exist.");
		return player[0];
	}

	/**
	 * Sort player array in descending order using bubble sort
	 */
	public NimPlayer[] bubbleSortDesc(NimPlayer[] array) {
		if (array.length == 0)
			return array;
		for (int i = 0; i < array.length; i++) {
			for (int j = 0; j < array.length - 1 - i; j++) {
				if (array[j + 1].getWinRatio() > array[j].getWinRatio()) {
					NimPlayer temp = array[j + 1];
					array[j + 1] = array[j];
					array[j] = temp;
				} else {
					if (array[j + 1].getWinRatio() == array[j].getWinRatio()) {
						// Alphabetize user names when ratios are the same
						if (array[j + 1].getUserName().compareTo(array[j].getUserName()) <= 0) {
							NimPlayer temp = array[j + 1];
							array[j + 1] = array[j];
							array[j] = temp;
						}
					}
				}
			}
		}
		return array;
	}

	/**
	 * Sort player array in ascending order by using bubble sort
	 */
	public NimPlayer[] bubbleSortAsc(NimPlayer[] array) {
		if (array.length == 0)
			return array;
		for (int i = 0; i < array.length; i++) {
			for (int j = 0; j < array.length - 1 - i; j++) {
				if (array[j + 1].getWinRatio() < array[j].getWinRatio()) {
					NimPlayer temp = array[j + 1];
					array[j + 1] = array[j];
					array[j] = temp;
				} else {
					if (array[j + 1].getWinRatio() == array[j].getWinRatio()) {
						// Alphabetize user names when ratios are the same
						if (array[j + 1].getUserName().compareTo(array[j].getUserName()) <= 0) {
							NimPlayer temp = array[j + 1];
							array[j + 1] = array[j];
							array[j] = temp;
						}
					}
				}
			}
		}
		return array;
	}

	/**
	 * Check if the current user name exists in player array
	 */
	public boolean check(String s) {
		for (int i = 0; i < player.length; i++) {
			if (s.equals(player[i].getUserName()))
				return true;
		}
		return false;
	}

	/**
	 * Dynamically add elements at the end of player array
	 */
	public static NimPlayer[] add(NimPlayer element, NimPlayer[] p) {
		NimPlayer[] array = new NimPlayer[p.length + 1];
		for (int i = 0; i < p.length; i++) {
			array[i] = p[i];
		}
		array[p.length] = element;
		return array;
	}

	/**
	 * Dynamically remove the element with the specified index in player array
	 */
	public NimPlayer[] remove(int i, NimPlayer[] p) {
		if (p.length == 1) {
			p[0] = null;
			return p;
		} else {
			NimPlayer[] array = new NimPlayer[p.length - 1];
			for (int m = 0; m < array.length; m++) {
				if (m < i)
					array[m] = p[m];
				else
					array[m] = p[m + 1];
			}
			return array;
		}
	}

	/**
	 * Dynamically remove elements at the end of player array
	 */
	public NimPlayer[] remove(NimPlayer[] p) {
		if (p.length == 1) {
			p[0] = null;
			return p;
		} else {
			NimPlayer[] array = new NimPlayer[p.length - 1];
			for (int m = 0; m < array.length; m++) {
				array[m] = p[m];
			}
			return array;
		}
	}

	/**
	 * Read in the data from the .dat file;
	 * Create new player objects, and fill in the corresponding information
	 */
	public static NimPlayer[] read_data(File file, NimPlayer[] player_before) {
		FileReader input = null;
		BufferedReader reader = null;
		try {
			input = new FileReader(file);
			reader = new BufferedReader(input);
			String line = null;
			// Read line by line
			while ((line = reader.readLine()) != null) {
				NimPlayer p;
				String[] temp = line.split("\t");
				// Create a new player object; Assign values to all variables
				String type = temp[0];
				if(type.equals("NimHumanPlayer"))
					 p = new NimHumanPlayer(temp[1], temp[2], temp[3]);
				else
					 p = new NimAIPlayer(temp[1], temp[2], temp[3]);
				p.setGamesPlayed(Double.valueOf(temp[4]));
				p.setGamesWon(Double.valueOf(temp[5]));
				p.setWinRatio(Double.valueOf(temp[6]));
				
				// Add to player array dynamically
				if (player_before[0] != null)
					player_before = add(p, player_before);
				else
					player_before[0] = p;
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (null != reader) {
				try {
					reader.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			if (null != input) {
				try {
					input.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

		}
		return player_before;
	}

	/**
	 * Write all current player data to .dat file
	 */
	public void write_data(File f, NimPlayer[] player) {
		try {
			FileWriter fileWriter = new FileWriter(f, true);
			BufferedWriter bw = new BufferedWriter(fileWriter);
			for (NimPlayer p : player) {
				/*
				 * Write the information into file in order; 
				 * Separate data of a player with \t;
				 * Different players are separated by blank lines
				 */
				bw.write(p.getType(p) + "\t");
				bw.write(p.getUserName() + "\t");
				bw.write(p.getFamilyName() + "\t");
				bw.write(p.getGivenName() + "\t");
				bw.write( p.getPlayed() + "\t");
				bw.write( p.getWin() + "\t");
				bw.write(p.getWinRatio() + "\t");
				bw.write("\n");
			}
			// Close BufferedWriter
			bw.close();
			fileWriter.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
============================================
src/Testable.java
10:41:30_Tuesday_26_May_2020
============================================

public interface Testable {
	public String advancedMove(boolean[] available, String lastMove);
}
============================================
src/NimAIPlayer.java
10:41:30_Tuesday_26_May_2020
============================================
/** 
 * name: Yuqing Chang
 * student number: 1044862
 * username: yuqchang
 */
import java.util.Random;

public class NimAIPlayer extends NimPlayer implements Testable {
	// you may further extend a class or implement an interface
	// to accomplish the tasks.

	/**
	 * Constructor of NimAIPlayer class
	 */
	public NimAIPlayer(String username, String family_name, String given_name) {
		// Call the constructor of the parent class
		super(username, family_name, given_name);
	}

	public String advancedMove(boolean[] available, String lastMove) {
		// the implementation of the victory
		// guaranteed strategy designed by you
		String move = "";
		return move;
	}

	/**
	 * Return the number of stones the AIplayer wants to remove
	 */
	public int removeStone(NimGame game) {
		System.out.println(givenName + "'s turn - remove how many?");
		Random rand = new Random();
		NimPlayer[] players = new NimPlayer[2]; 
		players = game.getPlayer(); 
		int initial = game.getStoneInitial(); 
		int upper = Math.min(initial, game.getStoneUpper()); 
		int k = (initial - 1) % (upper + 1); 
		boolean condition1 = getType(players[0]).equals("NimAIPlayer") && (k == 0);
		boolean condition2 = getType(players[1]).equals("NimAIPlayer") && (k != 0);
		if(condition1 || condition2) {
			for(int i=1; i<= Math.min(game.getStoneLeft(), game.getStoneUpper()); i++)
		    {
				int m = Math.min(game.getStoneLeft()-i, game.getStoneUpper());
				if((game.getStoneLeft()-i) % (m+1) == 0) {
					this.removeNum = i;
					return this.removeNum;
				}
		    }
		}else {
			
				this.removeNum = game.getMin(); 
	
		}
		return this.removeNum;
	}


}
============================================
src/NimPlayer.java
10:41:30_Tuesday_26_May_2020
============================================
/** 
 * name: Yuqing Chang
 * student number: 1044862
 * username: yuqchang
 */

import java.io.BufferedWriter;
import java.io.*;

public abstract class NimPlayer {

	// Declaring variables; guarantee data privacy
	protected String userName = "";
	protected String givenName = "";
	protected String familyName = "";
	protected double gamesplayed, gamesWon;
	protected int removeNum; // The number of stones removed
	protected double winRatio; // Winning ratio

	/**
	 * Constructor of NimPlayer class; Initialize all variables
	 */
	public NimPlayer(String username, String family_name, String given_name) {
		this.userName = username;
		this.givenName = given_name;
		this.familyName = family_name;
		this.gamesWon = 0.0;
		this.gamesplayed = 0.0;
		this.winRatio = 0;
	}

	/**
	 * Get userName of a NimPlayer object
	 */
	public String getUserName() {
		return this.userName;
	}
	
	/**
	 * Get family name of a NimPlayer object
	 */
	public String getFamilyName() {
		return this.familyName;
	}

	/**
	 * Get full name of a NimPlayer object
	 */
	public String getGivenName() {
		return this.givenName;
	}
	
	/**
	 * Set the number of games that a NimPlayer object has played
	 */
	public void setGamesPlayed(double games_played) {
		this.gamesplayed = games_played;
	}

	/**
	 * Set the number of games that a NimPlayer object has won
	 */
	public void setGamesWon(double games_won) {
		this.gamesWon = games_won;
	}

	/**
	 * Get winning ratio of a NimPlayer object
	 */
	public double getWinRatio() {
		return this.winRatio;
	}

	/**
	 * Set winning ratio of a NimPlayer object
	 */
	public void setWinRatio(double m) {
		this.winRatio = m;
	}

	/**
	 * Set given_name and family_name of a NimPlayer object
	 */
	public void setName(String new_family_name, String new_given_name) {
		this.givenName = new_given_name;
		this.familyName = new_family_name;
	}

	/**
	 * Get full name of a NimPlayer object
	 */
	public String getFullName() {
		return this.givenName + " " + this.familyName;
	}

	/**
	 * Update the number of games won
	 */
	public void win() {
		this.gamesWon = this.gamesWon + 1;
	}

	/**
	 * Get the number of games won of a NimPlayer object
	 */
	public int getWin() {
		return (int) this.gamesWon;
	}
	
	/**
	 * Get the number of games won of a NimPlayer object
	 */
	public int getPlayed() {
		return (int) this.gamesplayed;
	}

	/**
	 * Reseting a player's statistics
	 */
	public void reset() {
		this.gamesplayed = 0;
		this.gamesWon = 0;
		this.winRatio = 0.0;
	}

	/**
	 * Update the number of games played
	 */
	public void played() {
		gamesplayed = gamesplayed + 1;
	}

	/**
	 * Display information of a NimPlayer object
	 */
	public void display() {
		System.out.println(this.userName + "," + this.givenName + "," + this.familyName + ","
				+ (int) this.gamesplayed + " games," + (int) this.gamesWon + " wins");
	}

	/**
	 * Update winning ratio of a NimPlayer object
	 */
	public void winRatio() {
		if (this.gamesplayed != 0) {
			this.winRatio = this.gamesWon / this.gamesplayed;
		} else
			winRatio = 0;
	}

	/**
	 * Convert the number of games played to string
	 */
	public String convertGamesNum() {
		String num = "";
		int play = (int) gamesplayed;
		if (play / 10 == 0) {
			num = "0" + play;
			return num;
		} else
			return num + play;
	}
	
	/**
	 * Ask and return the number of stones the player wants to remove
	 */
	public abstract int removeStone(NimGame game);
		
	/**
	 * Get the object type of the current object
	 */
	public String getType(Object object) {
		String typeName = object.getClass().getName();
		int length = typeName.lastIndexOf(".");
		String type = typeName.substring(length + 1);
		return type;
	}

}
============================================
src/MyRTException.java
10:41:30_Tuesday_26_May_2020
============================================
/** 
 * name: Yuqing Chang
 * student number: 1044862
 * username: yuqchang
 */
public class MyRTException extends RuntimeException {
	private static final long serialVersionUID = 1L;

	/**
	 * No-argument constructor of MyRTException class
	 */
	public MyRTException() {

	}

	/**
	 * Constructor of MyRTException class
	 */
	public MyRTException(String message) {
		super(message);
	}

}
============================================
src/NimGame.java
10:41:30_Tuesday_26_May_2020
============================================
/** 
 * name: Yuqing Chang
 * student number: 1044862
 * username: yuqchang
 */
public class NimGame {

	// Declaring variables; guarantee data privacy
	private int stoneInitial, stoneUpper, stoneLeft;
	private int min;
	// Array to store current NimPlayer objects
	private NimPlayer[] playerGame = new NimPlayer[2];

	/**
	 * Constructor of NimGame class
	 */
	public NimGame(int initialstones, int upperbound, NimPlayer player1, NimPlayer player2) {
		this.stoneInitial = initialstones;
		this.stoneLeft = initialstones;
		this.stoneUpper = upperbound;
		playerGame[0] = player1;
		playerGame[1] = player2;
	}
  
	/**
	 * Get the array of players
	 */
	public NimPlayer[] getPlayer() {
		return this.playerGame;
	}

	/**
	 * Get the the number of remaining stones
	 */
	public int getStoneLeft() {
		return this.stoneLeft;
	}
	
	/**
	 * Get the the number of initial stones
	 */
	public int getStoneInitial() {
		return this.stoneInitial;
	}

	/**
	 * Get the the max number of removing stones
	 */
	public int getStoneUpper() {
		return this.stoneUpper;
	}

	public int getMin() {
		return this.min;
	}
	

	/**
	 * Begain a game of Nim
	 */
	public void games() {
		// Declaring variables
		int remove = 0;
		boolean again = true;
		String winner = ""; // Store the name of the winner

		printStones(stoneLeft);

		/*
		 * If stone_left is 0, then the game is over and announce the winner
		 */
		while (again) {
			for (int i = 0; i < 2; i++) {
				boolean incorrect = true;
				while (incorrect == true) {
					remove = playerGame[i].removeStone(this);
					min = Math.min(stoneLeft, this.stoneUpper);
					// Check if the number of stones removed is valid
					try {
						if (remove > min || remove < 1) {
							System.out.println();
							throw new MyRTException();
						} else
							incorrect = false;
					} catch (MyRTException r) {
						String message = "Invalid move. You must remove between 1 and ";
						System.out.println(message + min + " stones.");
						printStones(stoneLeft);
					}
				}
				stoneLeft = stoneLeft - remove; // Update variable value
				if (stoneLeft == 0) {
					winner = playerGame[1 - i].getFullName();
					playerGame[1 - i].win();
					again = false;
					break;
				}
				printStones(stoneLeft);
			}
		}

		System.out.println();
		System.out.println("Game Over");
		System.out.println(winner + " wins!");

		/*
		 * Update the statistics for the two players
		 */
		playerGame[0].played();
		playerGame[1].played();
		playerGame[0].winRatio();
		playerGame[1].winRatio();
	}

	/**
	 * Print the number of stones, and displaying stones, which will be represented
	 * by asterisks
	 */
	public void printStones(int stone_left) {
		System.out.println();
		String str = "";
		for (int i = 1; i <= stone_left; i++)
			str = str + " " + "*";
		System.out.println(stone_left + " stones left:" + str);
	}

}
============================================
src/Arguments.java
10:41:30_Tuesday_26_May_2020
============================================
/** 
 * name: Yuqing Chang
 * student number: 1044862
 * username: yuqchang
 */
public class Arguments extends Exception {
	private String message = "";

	/**
	 * No-argument constructor of Arguments class
	 */
	public Arguments() {
		super();
	}

	/**
	 * Constructor of Arguments class
	 */
	public Arguments(String msg) {
		super(msg);
		message = msg;
	}

	/**
	 * Get the message of the error
	 */
	public String getMessage() {
		return this.message;
	}
}
